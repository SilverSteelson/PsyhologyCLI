import json
import sys,string
import airtable
import requests
import datetime
import psycopg2


try:
    #Пытаемся установить соединение с БД
    connecton = psycopg2.connect(
        database="test1", 
        user="postgres", 
        password="9318093180bh", 
        host="127.0.0.1", 
        port="5432"
    )
    #Значения для авторизации в Airtable
    baseID = 'appQnV5O4ndpzTcMs'
    apiID = 'keyncr4pK9gc6bE1r'
    airtablename = 'Psychotherapists'

    table_therapyst = "therapyst"
    table_Method_trapyst = 'method_terapyst'
    table_method = 'methods'
    all_table = []
    all_table.append(table_therapyst)
    all_table.append(table_Method_trapyst)
    all_table.append(table_method)

    print("Соединение с PostgreSQL успешно установлено!")
    curs = connecton.cursor()
    #Если такой БД нет создаём её по шаблону
    for table in all_table:
        curs.execute("SELECT to_regclass('{}')".format(table))
        if not curs.fetchone()[0]:
            if(table==table_therapyst):
                curs.execute('''CREATE TABLE IF NOT EXISTS {} (
                                ID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                IDRECORD VARCHAR(17) NOT NULL,
                                NAME TEXT NOT NULL,
                                IMG_FUL VARCHAR(300),
                                IMG_SMAL VARCHAR(300),
                                DATA DATE,
                                CONSTRAINT REC UNIQUE(IDRECORD));'''.format(table))
            elif(table==table_Method_trapyst):
                curs.execute('''CREATE TABLE IF NOT EXISTS {} (
                                ID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                IDTERAPYST INT,
                                IDMETHOD INT);'''.format(table))
            elif(table==table_method):
                curs.execute('''CREATE TABLE IF NOT EXISTS {} (
                                ID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                METHOD TEXT NOT NULL,
                                CONSTRAINT uniq UNIQUE(METHOD));'''.format(table))
            connecton.commit()  
            print("База данных {} создана!".format(table))
        else:
            print("Обновление таблицы {}".format(table))
    #Подключаем Airtablet
    table = airtable.Airtable(baseID,airtablename,apiID)
    #print('Заполняем таблицу методов извлекая их из всех записей')
    curs = connecton.cursor()
    for records in table.get_all():
        for terapy in records['fields']['Методы']:
            curs.execute(
            "INSERT INTO {} (METHOD) VALUES ('{}') ON CONFLICT (METHOD) DO NOTHING".format
            (table_method,terapy))
    connecton.commit() 
    #Анализируем полученный из таблицы сложный словарь
    ids = set()#Множество куда сохраняем скаченные ключи
    for records in table.get_all():

        idrecord = records['id']
        ids.add(idrecord)
        data = records['createdTime']
        name = records['fields']['Имя']
        foto = records['fields']['Фотография'][0]['thumbnails']

        #print('Вставляем в БД новые значения и фиксируем изменения')
        curs = connecton.cursor()
        curs.execute(
        '''INSERT INTO {} (IDRECORD,NAME,IMG_FUL,IMG_SMAL,DATA) 
        VALUES('{}' ,'{}' ,'{}' ,'{}' ,'{}') 
        ON CONFLICT(IDRECORD) DO NOTHING RETURNING ID'''.format
        (table_therapyst,idrecord,name,foto['large']['url'],foto['small']['url'],data,))
        if curs.fetchone():
            idPkTAbleTherapeft = curs.fetchone()[0]
            connecton.commit() 
            #print('методы вставляем в БД')
            curs = connecton.cursor()
            for method in records['fields']['Методы']:
                #Извлекаем из таблицы значения ID по имени метода
                curs.execute("SELECT ID FROM {} WHERE METHOD='{}' ORDER BY ID".format(table_method,method))
                id_method = curs.fetchone()[0]
                #И записываем ID всех методов этого терапевта
                curs.execute(
                "INSERT INTO {} (IDTERAPYST,IDMETHOD) VALUES({},{}) ON CONFLICT DO NOTHING".format
                (table_Method_trapyst,idPkTAbleTherapeft,id_method))
            connecton.commit() 

    #print('Поиск значений ключей которые есть в БД ,но нет в Airtable и удаление записей с такими ключами из БД')
    curs = connecton.cursor()
    curs.execute('SELECT IDRECORD FROM {}'.format(table_therapyst))
    rows = curs.fetchall()
    comp =set()
    for row in rows:
        comp.add(row[0])
    result = list(comp-ids)#Разность множеств содержащая удалённые из Airtable записи
    if len(result) !=0 :
        #Если список с ключами не пустой, значит есть что удалить!
        for poit in result:
            curs.execute("DELETE FROM {} WHERE IDRECORD={} RETURNING NAME;".format(table_therapyst,poit,))
            id_delete_terapeft = curs.fetchone()[0]
            print("Удалена учётная запись с ID: ", str(poit))
            #А теперь удалим все остальные записи этого терапевта из  таблиц методов
            curs.execute("DELETE FROM {} WHERE IDTERAPYST='{}';".format(table_Method_trapyst,id_delete_terapeft,))
    else:
        print("Нет полей для удаления: Конец сеанса!")
    connecton.commit()  

except (Exception, psycopg2.Error) as error:
    print("Ошибка при работе с PostgreSQL", error)
finally:
    if connecton:
        curs.close()
        connecton.close()
        print("Соединение с PostgreSQL закрыто")


